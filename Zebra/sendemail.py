#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import sys
import time
import smtplib
from os.path import basename
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart

from pddsysconfig import logger as log
from pddsysconfig import load_app_configurations as loadConfig
from pddsysconfig import date_time_formatter as date_time_format
from pddsysconfig import decrypt as decrypt
from pddsysconfig import zip_account_cookies as zip_account_cookies

reload(sys)
sys.setdefaultencoding("UTF-8")


html_template="""
    <html>
              <head>
                <meta charset="UTF-8">
                <style type="text/css">
              		body{margin: 20px;}
              		ol>li{line-height: 25px;}
              		.extra-field-cls{font-size: 9px; line-height: 20px; border-bottom: 1px dotted #999 }
              		.extra-field-cls > div { border-bottom: 1px dotted #999}
              		.mall_info{margin-top:20px;width:auto; height:25px; font-weight:bold; background-color:#999}
              		table>thead>tr>th, table>tbody>tr>td {font-size:10px; text-align:left;border-bottom: 1px solid #ccc;overflow: hidden;padding: 5px 7px;vertical-align: top}
              	</style>
              </head>
              <body>
                <div>%s</div>
                %s

                <div>
                  <hr/>
                  <div style="font-size: 10px; color:gray;">
                  <div>This email template generated by System Automatic</div>

                  </div>
                </div>
              </body>
    </html>

"""

content_template = """
    <div class='mall_info'>%s</div>
    <table>
        <thead>%s</thead>
        %s
    </table>
"""

templates = {
    'th_tpl': '<th>%s</th>',
    'tr_tpl': '<tr>%s</tr>',
    'td_tpl': '<td>%s</td>'
}

indexs = {
    'order_sn': 2,
    'payment_amount': 7,
    'order_status': 8,
    'goods_id': 10,
    'goods_name': 11,
    'sku_id':12,
    'mall_name': 14,
    'payment_url': 16
}

account_username_index=0
index_array = [2, 7, 8, 10, 11, 12, 14, 16]

email_config=None

def get_content_from_attachments(attachments, text_content=None, filter_out_account=False):
    content = ''
    text_content = text_content if text_content else ''
    accounts = None
    for attachment in attachments or []:
        attachment = str(attachment).decode('utf-8')
        attachmentContent = ''
        with open(attachment, "rb") as file:
            attachmentContent += file.read()

        if attachmentContent:
            contents = attachmentContent.split('\n')
            headers = contents[0].split(",")
            orders =contents[1:]
            headers_text = [headers[idx] for idx in index_array if headers[idx]]
            header_text =''
            if headers_text:
                header_text+=templates['th_tpl'] % 'No.#'
            for text in headers_text:
                header_text += templates['th_tpl'] % text

            trs_content = ''

            order_count = 0

            if filter_out_account:
                accounts = [order.split(',')[account_username_index] for order in orders if order]
                log.info('[%s] used accounts %s', basename(attachment), accounts)

            for order in orders:
                if order:
                    order_count += 1
                    tr_content = templates['td_tpl'] % order_count
                    for value in [order.split(',')[idx] for idx in index_array if order]:
                        tr_content += templates['td_tpl'] % value
                    if tr_content:
                        trs_content += templates['tr_tpl'] % tr_content

            mall_info = '%s %s单' % (orders[0].split(',')[indexs['mall_name']], order_count)

            content += content_template % (mall_info, header_text, trs_content)

    if text_content or content:
        html_content = html_template % (text_content, content)
        # print html_content
        return html_content, accounts

    return None, None


def send_email(content=None, attachments=None, append_attach_as_email_content=True, attach_accounts_info=False):
    """
    Send email with content and attachments content
    :param content:
    :param attachments:
    :param append_attach_as_email_content: 是否将附件中的内容 写在Email content中, default is True
    :param attach_account: 是否要将  attachments中所涉及到的  User cookie 作为附件发送
    :return:
    """
    try:

        if not email_config:
            config = loadConfig()
        else:
            config = email_config


        attachments = attachments or []

        if append_attach_as_email_content:
            c_tuple = get_content_from_attachments(attachments, content, attach_accounts_info)
            content, accounts_info = c_tuple

            ########## if attach_accounts_info, then send email with the account cookies attachment #########
            if attach_accounts_info and accounts_info:
                zip_file = zip_account_cookies(accounts_info)
                if zip_file:
                    log.info('The email will attach the account cookies data')
                    attachments.append(zip_file)
            ########## if attach_accounts_info, then send email with the account cookies attachment #########
        else:
            content  = html_template % (content or '', '')


        if not content and not attachments:
            log.error('Can not sent empty email (without content and attachments)')
            return


        mail = MIMEMultipart()
        mail.attach(MIMEText(content, 'html'))

        log.info("Ready send email.....")

        email_username = decrypt(config.email_login_username)
        de_email_pwd = decrypt(config.email_login_password)

        email_subject = ('%s 订单信息' % time.strftime(date_time_format)).decode('utf-8')
        email_from = email_username
        mail['Subject'] = email_subject
        mail['From'] = email_from
        email_tos = config.email_sent_to.split(',')
        mail['To'] = config.email_sent_to
        mail['Cc'] = config.email_cc_to

        for f in attachments or []:
            f = str(f).decode('utf-8')
            print f
            base_file_name= str(basename(f)).encode('gb2312')
            with open(f, "rb") as fil:
                part = MIMEApplication(
                    fil.read(),
                    Name=base_file_name
                )
            # After the file is closed
            part['Content-Disposition'] = 'attachment; filename="%s"' % base_file_name
            mail.attach(part)

        server = smtplib.SMTP('smtp.sina.com:25')
        server.ehlo()
        server.starttls()
        server.login(email_username, de_email_pwd)
        server.sendmail(email_from, email_tos, mail.as_string())
        server.quit()
        log.info('Send email successfully')
        print 'Send email successfully'

    except Exception as e:
        print e
        print e.message, e
        log.error("Send Email Error")