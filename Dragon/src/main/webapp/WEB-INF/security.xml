<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xmlns:util="http://www.springframework.org/schema/util"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
              http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd
               http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
  
  <!-- This must go before the http element in order to be used by security:authorize tags using the access attribute -->
  <beans:bean id="expressionHandler" class="com.ly.web.security.DefaultWebSecurityExpressionHandler">
    <beans:property name="root">
      <beans:bean class="com.ly.web.security.WebSecurityExpressionRoot"/>
    </beans:property>
  </beans:bean>


  <http pattern="/jscripts/jscriptRes.js" security="none"/>
  <http pattern="/ext/**" security="none"/>
  <http pattern="/security/login" security="none"/>
  <http pattern="/common/**" security="none"/>
  <http pattern="/service/**" security="none"/>
  
  <!-- HTTP security configurations -->
  <!--<http auto-config="true" use-expressions="true">-->
  <http entry-point-ref="authenticationProcessingFilterEntryPoint" access-decision-manager-ref="accessDecisionManager">
    <!-- Configure these elements to secure URIs in your application -->
    <intercept-url pattern="/html/**" access="hasFeature('allowLoginPagoda')"/>
    <intercept-url pattern="/desktop/**" access="hasFeature('allowLoginPagoda')"/>
    <!--<intercept-url pattern="/dwr/call/**" access="permitAll"/>-->
    <!--<intercept-url pattern="/common/**" access="permitAll"/>-->

    <csrf disabled="true"/>

    <form-login login-page="/security/login" authentication-failure-url="/security/login?error=true"
                default-target-url="/"
                login-processing-url="/security/check"
                authentication-success-handler-ref="authSuccessLogger"
                authentication-failure-handler-ref="authFailureLogger"/>

    <custom-filter position="PRE_AUTH_FILTER" ref="loginSecurityFilter"/>
    <custom-filter position="LOGOUT_FILTER" ref="logoutFilter"/>
    
    <anonymous/>

  </http>

  <beans:bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
    <beans:constructor-arg ref="authenticationProcessingFilterEntryPoint"/>
  </beans:bean>

  <beans:bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
    <beans:constructor-arg value="/security/login"/>
    <beans:property name="forceHttps" value="false"/>
  </beans:bean>


  <!-- This bean is optional; it isn't used by any other bean as it only listens and logs to commons logging -->
  <beans:bean id="loggerListener" class="org.springframework.security.access.event.LoggerListener">
  </beans:bean>

  <beans:bean id="authSuccessLogger" class="com.ly.web.security.WebAuthenticationSuccessLoggerHandler">
    <beans:property name="defaultTargetUrlTpl" value="false"/>
  </beans:bean>

  <beans:bean id="authFailureLogger" class="com.ly.web.security.WebAuthenticationFailureLoggerHandler">
    <beans:property name="defaultFailureUrl" value="/security/login?error=true"/>
    <beans:property name="retryCount" value="6"/>
  </beans:bean>

  <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
    <beans:constructor-arg index="0" value="8"/>
  </beans:bean>

  <authentication-manager alias="authenticationManagerAlias">
    <authentication-provider ref="userLogInProvider"/>
  </authentication-manager>

  <beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
    <beans:constructor-arg>
      <beans:list>
        <beans:bean class="org.springframework.security.web.access.expression.WebExpressionVoter">
          <beans:property name="expressionHandler" ref="expressionHandler"/>
        </beans:bean>
      </beans:list>
    </beans:constructor-arg>
    <beans:property name="allowIfAllAbstainDecisions" value="false"/>
  </beans:bean>

  <beans:bean id="sas" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
    <beans:constructor-arg>
      <beans:list>
        <beans:bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy">
        </beans:bean>
        <beans:bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
          <beans:constructor-arg ref="sessionRegistry"/>
        </beans:bean>
      </beans:list>
    </beans:constructor-arg>
  </beans:bean>
  
  
  <beans:bean id="userLogInProvider" class="com.ly.web.security.UserLogInAuthenticationProvider">
    <beans:property name="passwordEncoder" ref="passwordEncoder" />
    <beans:property name="userDetailsService" ref="userDao" />
    <beans:property name="userDao" ref="userDao"/>
  </beans:bean>


  <beans:bean id="loginSecurityFilter" class="com.ly.web.security.LoginSecurityFilter">
    <beans:constructor-arg value="/security/login"/>
    <beans:property name="authenticationManager" ref="authenticationManagerAlias"/>
    <beans:property name="filterProcessesUrl" value="/security/check"/>
    <beans:property name="authenticationSuccessHandler" ref="authSuccessLogger"/>
    <beans:property name="authenticationFailureHandler" ref="authFailureLogger"/>
    <beans:property name="populateFailureTokens" value="false"/>
    <beans:property name="loginTokens" ref="defaultTokens"/>
    <beans:property name="sessionAuthenticationStrategy" ref="sas"/>
    <beans:property name="enableLoginTokensValidation" value="true"/>
    <beans:property name="requestEncrypted" value="false"/>
  </beans:bean>

  <beans:bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
    <beans:constructor-arg value="/security/login"/> <!-- URL redirected to after logout -->
    <beans:constructor-arg>
      <beans:list>
        <!-- ref model="rememberMeServices"/ -->
        <!--<beans:bean class="com.ly.web.security.LogoutWebActivityLoggingHandler">-->
          <!--<beans:property name="webActivityManager" ref="webActivityManager"/>-->
          <!--<beans:property name="webLoggingService" ref="webLoggingService" />-->
          <!--<beans:property name="SessionRegistry" ref="sessionRegistry"/>-->
        <!--</beans:bean>-->
        <beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
          <beans:property name="invalidateHttpSession" value="true"/>
        </beans:bean>
      </beans:list>
    </beans:constructor-arg>
    <beans:property name="filterProcessesUrl" value="/security/logout"/>
  </beans:bean>

  <util:map id="defaultTokens" map-class="java.util.HashMap" key-type="java.lang.String"
            value-type="java.lang.String">
    <beans:entry key="token1" value="j_username"/>
    <beans:entry key="token2" value="j_password"/>
  </util:map>

  <beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />


</beans:beans>