<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-2.5.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"
       default-lazy-init="false">

  <!-- Activates annotation-based bean configuration -->
  <context:annotation-config/>

  <!-- Scans for application @Components to deploy -->
  <context:component-scan base-package="com.ly.web.controller" />

  <mvc:annotation-driven/>
  <mvc:interceptors>
    <bean id="webContentInterceptor" class="org.springframework.web.servlet.mvc.WebContentInterceptor">
      <property name="cacheSeconds" value="2592000"/>
      <property name="useExpiresHeader" value="true"/>
      <property name="useCacheControlHeader" value="true"/>
      <property name="useCacheControlNoStore" value="true"/>
      <property name="cacheMappings">
        <props>
          <!-- cache for one month -->
          <!--<prop key="/html/ozExtDirect">86400</prop>-->
          <prop key="/dwr/**">86400</prop>
          <!-- don't set cache headers -->
          <prop key="/data/**">-1</prop>
        </props>
      </property>
    </bean>
  </mvc:interceptors>

  <!--
     DispatcherServlet will automatically look up all resolvers in a certain order.

     The order of the following two exception resolver is important . If no Order interface implemented, the later will be
     run first (in this case, swfExceptionResolver). So you have to put SimpleMappingExceptionResolver in the front
     so that it will not prevent SpringWebFlowExceptionResolver from running.

     After setting "order" property, the physical order is not important any more.
   -->
  <bean id="exceptionResolver"
        class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    <property name="defaultErrorView" value="sysError"/>
    <property name="order" value="2"/>
    <property name="exceptionMappings">
      <props>
        <prop key="org.springframework.dao.DataAccessException">dataError</prop>
        <prop key="org.springframework.orm.ObjectRetrievalFailureException">dataError</prop>
      </props>
    </property>
  </bean>

  <bean id="filenameController" class="org.springframework.web.servlet.mvc.UrlFilenameViewController"/>

  <!-- Add additional controllers beans here -->
  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize" value="2097152"/>
  </bean>

  <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename" value="ApplicationResources"/>
    <property name="useCodeAsDefaultMessage" value="true"/>
  </bean>

  <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" p:order="0" >
  </bean>

  <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="mappings">
      <value>
      </value>
    </property>
    <property name="order" value="1"/>
  </bean>

  <!-- Maps request paths to @Controller classes; e.g. a path of /hotels looks for a controller named HotelsController -->
  <bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping">
    <property name="order" value="2" />
    <property name="defaultHandler">
      <!-- If no @Controller match, map path to a view to render; e.g. the "/intro" path would map to the view named "intro" -->
      <bean class="org.springframework.web.servlet.mvc.UrlFilenameViewController" />
    </property>
  </bean>

  <!-- Enables annotated POJO @Controllers -->
  <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

  <!-- Enables plain Controllers -->
  <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
  <!-- View Resolver for JSPs -->
  <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="requestContextAttribute" value="rc"/>
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    <property name="prefix" value="/WEB-INF/pages/"/>
    <property name="suffix" value=".jsp"/>
  </bean>
</beans>
